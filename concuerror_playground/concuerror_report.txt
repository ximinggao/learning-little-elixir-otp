Concuerror 0.20.0+build.2246.ref11477b1 started at 17 May 2020 10:32:31
 Options:
  [{after_timeout,1000},
   {assertions_only,false},
   {assume_racing,true},
   {depth_bound,500},
   {disable_sleep_sets,false},
   {dpor,optimal},
   {entry_point,{'Elixir.SpawnReg.ConcurrencyTest',test,[]}},
   {exclude_module,[]},
   {first_process_errors_only,false},
   {ignore_error,[]},
   {instant_delivery,true},
   {interleaving_bound,infinity},
   {keep_going,false},
   {non_racing_system,[]},
   {pa,"/usr/local/Cellar/elixir/1.10.3/lib/elixir/ebin"},
   {pa,"/usr/local/Cellar/elixir/1.10.3/lib/ex_unit/ebin"},
   {pa,"_build/test/lib/concuerror_playground/ebin"},
   {print_depth,20},
   {scheduling,round_robin},
   {scheduling_bound_type,none},
   {show_races,true},
   {strict_scheduling,false},
   {symbolic_names,true},
   {timeout,5000},
   {treat_as_normal,[normal]},
   {use_receive_patterns,true}]
################################################################################
Interleaving #1
--------------------------------------------------------------------------------
Errors found:
* At step 3 process <P> exited abnormally
    Reason:
      {badarg,[{erlang,send,
                       ['Elixir.SpawnReg',stop],
                       [6,{file,"test/concurrency/spawn_reg_test.ex"}]}]}
    Stacktrace:
      [{erlang,send,
               ['Elixir.SpawnReg',stop],
               [6,{file,"test/concurrency/spawn_reg_test.ex"}]}]
* Blocked at a 'receive' ("deadlocked"; other processes have exited):
    <P.1.1/Elixir.SpawnReg> in spawn_reg.ex line 16
     Mailbox contents: []
--------------------------------------------------------------------------------
Event trace:
   1: <P>: <P.1> = erlang:spawn(erlang, apply, [#Fun<'Elixir.SpawnReg.ConcurrencyTest'.'-test/0-fun-0-'.0>,[]])
    in erlang.erl line 2795
   2: <P>: Exception badarg is raised by: erlang:send('Elixir.SpawnReg', stop)
    in spawn_reg_test.ex line 6
   3: <P>: exits abnormally ({badarg,[{erlang,send,['Elixir.SpawnReg',stop],[6,{file,[116,101,115,116,47,99,111,110|...]}]}]})
   4: <P.1>: undefined = erlang:whereis('Elixir.SpawnReg')
    in process.ex line 646
   5: <P.1>: <P.1.1/Elixir.SpawnReg> = erlang:spawn(erlang, apply, [#Fun<'Elixir.SpawnReg'.'-start/0-fun-0-'.0>,[]])
    in erlang.erl line 2795
   6: <P.1>: true = erlang:register('Elixir.SpawnReg', <P.1.1/Elixir.SpawnReg>)
    in process.ex line 592
   7: <P.1>: exits normally
################################################################################
Exploration completed!
################################################################################
Errors:
--------------------------------------------------------------------------------
* Stop testing on first error. (Check '-h keep_going').

################################################################################
Tips:
--------------------------------------------------------------------------------
* Check `--help attributes' for info on how to pass options via module attributes.
* Running without a scheduling_bound corresponds to verification and may take a long time.
* Increase '--print_depth' if output/graph contains "...".

################################################################################
Info:
--------------------------------------------------------------------------------
* Showing progress (-h progress, for details)
* Writing results in concuerror_report.txt
* Writing graph in spawn_reg.dot
* Automatically instrumented module io_lib
* Showing PIDs as "<symbolic name(/last registered name)>" ('-h symbolic_names').
* Automatically instrumented module error_handler
* Automatically instrumented module 'Elixir.SpawnReg.ConcurrencyTest'
* Automatically instrumented module erlang
* Automatically instrumented module 'Elixir.SpawnReg'
* Automatically instrumented module 'Elixir.Process'

################################################################################
Done at 17 May 2020 10:32:33 (Exit status: error)
  Summary: 1 errors, 1/1 interleavings explored
