digraph {
  graph [ranksep=0.3]
  node [shape=box,width=7,fontname=Monospace]
  "init" [label="Initial"];
  subgraph interleaving_1 {
    "{1,1}" [label="   1: <P>: <P.1> = erlang:spawn(erlang, apply, [...])\l"];
    "init" -> "{1,1}" [weight=1000];
    "{1,2}" [label="   2: <P>: Exception badarg is raised by: erlang:send('Elixir.SpawnReg', stop)\l",color=orange,penwidth=5];
    "{1,1}" -> "{1,2}" [weight=1000];
    "{1,3}" [label="   3: <P>: exits abnormally ({...})\l",color=red,penwidth=5];
    "{1,2}" -> "{1,3}" [weight=1000];
    "{1,4}" [label="   4: <P.1>: undefined = erlang:whereis('Elixir.SpawnReg')\l"];
    "{1,3}" -> "{1,4}" [weight=1000];
    "{1,5}" [label="   5: <P.1>: <P.1.1/Elixir.SpawnReg> = erlang:spawn(erlang, apply, [...])\l"];
    "{1,4}" -> "{1,5}" [weight=1000];
    "{1,6}" [label="   6: <P.1>: true = erlang:register('Elixir.SpawnReg', <P.1.1/Elixir.SpawnReg>)\l"];
    "{1,5}" -> "{1,6}" [weight=1000];
    "{1,7}" [label="   7: <P.1>: exits normally\l",color=limegreen,penwidth=5];
    "{1,6}" -> "{1,7}" [weight=1000];
    "{1,final}" [label="1: Error ([<P.1.1/Elixir.SpawnReg>] blocked)",style=filled,fillcolor=red];
    "{1,7}" -> "{1,final}" [weight=1000];
  }
}
